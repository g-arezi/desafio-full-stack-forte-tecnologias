// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// SQLite doesn't support enums, so we use strings with constraints

model Company {
  id          Int        @id @default(autoincrement())
  name        String
  cnpj        String     @unique
  employees   Employee[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("companies")
}

model Employee {
  id         Int                @id @default(autoincrement())
  name       String
  email      String             @unique
  cpf        String             @unique
  position   String             @default("Funcion√°rio")
  companyId  Int
  company    Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets     EmployeeAsset[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@map("employees")
}

model Asset {
  id          Int               @id @default(autoincrement())
  name        String
  type        String            // NOTEBOOK, MONITOR, CELULAR, MOUSE, TECLADO, TABLET
  serialNumber String?
  description String?
  status      String            @default("DISPONIVEL") // DISPONIVEL, EM_USO, EM_MANUTENCAO
  employees   EmployeeAsset[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("assets")
}

model EmployeeAsset {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  assetId       Int
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  asset         Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  associatedAt  DateTime @default(now())

  @@unique([employeeId, assetId])
  @@map("employee_assets")
}