{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CompanyService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000';\n  }\n  getAll() {\n    return this.http.get(`${this.baseUrl}/companies`).pipe(retry(1), catchError(this.handleError));\n  }\n  getById(id) {\n    return this.http.get(`${this.baseUrl}/companies/${id}`).pipe(catchError(this.handleError));\n  }\n  create(company) {\n    return this.http.post(`${this.baseUrl}/companies`, company).pipe(catchError(this.handleError));\n  }\n  update(id, company) {\n    return this.http.patch(`${this.baseUrl}/companies/${id}`, company).pipe(catchError(this.handleError));\n  }\n  delete(id) {\n    return this.http.delete(`${this.baseUrl}/companies/${id}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('Erro completo:', error);\n    let errorMessage = 'Erro desconhecido';\n    if (error.status === 0) {\n      errorMessage = 'Não foi possível conectar ao servidor. Verifique se o backend está rodando na porta 3000.';\n    } else if (error.error?.message) {\n      errorMessage = error.error.message;\n    } else if (error.message) {\n      errorMessage = error.message;\n    } else {\n      errorMessage = `Erro HTTP ${error.status}: ${error.statusText}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function CompanyService_Factory(t) {\n      return new (t || CompanyService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CompanyService,\n      factory: CompanyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","retry","CompanyService","constructor","http","baseUrl","getAll","get","pipe","handleError","getById","id","create","company","post","update","patch","delete","error","console","errorMessage","status","message","statusText","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Usuario\\Desktop\\Desafio Forte-tecnologias\\desafio-full-stack-forte-tecnologias\\frontend\\src\\app\\services\\company.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nexport interface Company {\r\n  id: number;\r\n  name: string;\r\n  cnpj: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreateCompanyDto {\r\n  name: string;\r\n  cnpj: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n  private readonly baseUrl = 'http://localhost:3000';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(): Observable<Company[]> {\r\n    return this.http.get<Company[]>(`${this.baseUrl}/companies`)\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getById(id: number): Observable<Company> {\r\n    return this.http.get<Company>(`${this.baseUrl}/companies/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  create(company: CreateCompanyDto): Observable<Company> {\r\n    return this.http.post<Company>(`${this.baseUrl}/companies`, company)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  update(id: number, company: Partial<CreateCompanyDto>): Observable<Company> {\r\n    return this.http.patch<Company>(`${this.baseUrl}/companies/${id}`, company)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  delete(id: number): Observable<any> {\r\n    return this.http.delete(`${this.baseUrl}/companies/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    console.error('Erro completo:', error);\r\n    \r\n    let errorMessage = 'Erro desconhecido';\r\n    \r\n    if (error.status === 0) {\r\n      errorMessage = 'Não foi possível conectar ao servidor. Verifique se o backend está rodando na porta 3000.';\r\n    } else if (error.error?.message) {\r\n      errorMessage = error.error.message;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    } else {\r\n      errorMessage = `Erro HTTP ${error.status}: ${error.statusText}`;\r\n    }\r\n    \r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;;;AAkBlD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,uBAAuB;EAEX;EAEvCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,OAAO,YAAY,CAAC,CACzDG,IAAI,CACHP,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAC,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACF,OAAO,cAAcM,EAAE,EAAE,CAAC,CAC7DH,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAG,MAAMA,CAACC,OAAyB;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAU,GAAG,IAAI,CAACT,OAAO,YAAY,EAAEQ,OAAO,CAAC,CACjEL,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAM,MAAMA,CAACJ,EAAU,EAAEE,OAAkC;IACnD,OAAO,IAAI,CAACT,IAAI,CAACY,KAAK,CAAU,GAAG,IAAI,CAACX,OAAO,cAAcM,EAAE,EAAE,EAAEE,OAAO,CAAC,CACxEL,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAQ,MAAMA,CAACN,EAAU;IACf,OAAO,IAAI,CAACP,IAAI,CAACa,MAAM,CAAC,GAAG,IAAI,CAACZ,OAAO,cAAcM,EAAE,EAAE,CAAC,CACvDH,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACS,KAAwB;IAC1CC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IAEtC,IAAIE,YAAY,GAAG,mBAAmB;IAEtC,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;MACtBD,YAAY,GAAG,2FAA2F;KAC3G,MAAM,IAAIF,KAAK,CAACA,KAAK,EAAEI,OAAO,EAAE;MAC/BF,YAAY,GAAGF,KAAK,CAACA,KAAK,CAACI,OAAO;KACnC,MAAM,IAAIJ,KAAK,CAACI,OAAO,EAAE;MACxBF,YAAY,GAAGF,KAAK,CAACI,OAAO;KAC7B,MAAM;MACLF,YAAY,GAAG,aAAaF,KAAK,CAACG,MAAM,KAAKH,KAAK,CAACK,UAAU,EAAE;;IAGjE,OAAOxB,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAACJ,YAAY,CAAC,CAAC;EAClD;;;uBAzDWlB,cAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAd1B,cAAc;MAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}