{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/employees';\n  }\n  getAllEmployees() {\n    return this.http.get(this.apiUrl).pipe(retry(1), catchError(this.handleError));\n  }\n  getEmployeesByCompany(companyId) {\n    return this.http.get(`${this.apiUrl}/company/${companyId}`).pipe(retry(1), catchError(this.handleError));\n  }\n  getEmployeeById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(retry(1), catchError(this.handleError));\n  }\n  createEmployee(employee) {\n    return this.http.post(this.apiUrl, employee).pipe(catchError(this.handleError));\n  }\n  updateEmployee(id, employee) {\n    return this.http.patch(`${this.apiUrl}/${id}`, employee).pipe(catchError(this.handleError));\n  }\n  deleteEmployee(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'Ocorreu um erro desconhecido!';\n    if (error.error instanceof ErrorEvent) {\n      // Erro do lado do cliente\n      errorMessage = `Erro: ${error.error.message}`;\n    } else {\n      // Erro do lado do servidor\n      errorMessage = `Erro ${error.status}: ${error.message}`;\n      if (error.error && error.error.message) {\n        errorMessage += ` - ${error.error.message}`;\n      }\n    }\n    console.error('Erro no EmployeeService:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","retry","EmployeeService","constructor","http","apiUrl","getAllEmployees","get","pipe","handleError","getEmployeesByCompany","companyId","getEmployeeById","id","createEmployee","employee","post","updateEmployee","patch","deleteEmployee","delete","error","errorMessage","ErrorEvent","message","status","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Usuario\\Desktop\\Desafio Forte-tecnologias\\desafio-full-stack-forte-tecnologias\\frontend\\src\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { Employee, CreateEmployeeDto } from '../models/employee.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n  private apiUrl = 'http://localhost:3000/employees';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllEmployees(): Observable<Employee[]> {\r\n    return this.http.get<Employee[]>(this.apiUrl)\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getEmployeesByCompany(companyId: number): Observable<Employee[]> {\r\n    return this.http.get<Employee[]>(`${this.apiUrl}/company/${companyId}`)\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getEmployeeById(id: number): Observable<Employee> {\r\n    return this.http.get<Employee>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        retry(1),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createEmployee(employee: CreateEmployeeDto): Observable<Employee> {\r\n    return this.http.post<Employee>(this.apiUrl, employee)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateEmployee(id: number, employee: Partial<Employee>): Observable<Employee> {\r\n    return this.http.patch<Employee>(`${this.apiUrl}/${id}`, employee)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteEmployee(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'Ocorreu um erro desconhecido!';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Erro do lado do cliente\r\n      errorMessage = `Erro: ${error.error.message}`;\r\n    } else {\r\n      // Erro do lado do servidor\r\n      errorMessage = `Erro ${error.status}: ${error.message}`;\r\n      if (error.error && error.error.message) {\r\n        errorMessage += ` - ${error.error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error('Erro no EmployeeService:', errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;;;AAMlD,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC;EAEX;EAEvCC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,MAAM,CAAC,CAC1CG,IAAI,CACHP,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAC,qBAAqBA,CAACC,SAAiB;IACrC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,MAAM,YAAYM,SAAS,EAAE,CAAC,CACpEH,IAAI,CACHP,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAG,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,MAAM,IAAIQ,EAAE,EAAE,CAAC,CACnDL,IAAI,CACHP,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAK,cAAcA,CAACC,QAA2B;IACxC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAW,IAAI,CAACX,MAAM,EAAEU,QAAQ,CAAC,CACnDP,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAQ,cAAcA,CAACJ,EAAU,EAAEE,QAA2B;IACpD,OAAO,IAAI,CAACX,IAAI,CAACc,KAAK,CAAW,GAAG,IAAI,CAACb,MAAM,IAAIQ,EAAE,EAAE,EAAEE,QAAQ,CAAC,CAC/DP,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAU,cAAcA,CAACN,EAAU;IACvB,OAAO,IAAI,CAACT,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,MAAM,IAAIQ,EAAE,EAAE,CAAC,CAClDL,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACY,KAAwB;IAC1C,IAAIC,YAAY,GAAG,+BAA+B;IAElD,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,SAASD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC9C,MAAM;MACL;MACAF,YAAY,GAAG,QAAQD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACG,OAAO,EAAE;MACvD,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;QACtCF,YAAY,IAAI,MAAMD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;;;IAI/CE,OAAO,CAACL,KAAK,CAAC,0BAA0B,EAAEC,YAAY,CAAC;IACvD,OAAOvB,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAACL,YAAY,CAAC,CAAC;EAClD;;;uBAlEWpB,eAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf7B,eAAe;MAAA8B,OAAA,EAAf9B,eAAe,CAAA+B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}